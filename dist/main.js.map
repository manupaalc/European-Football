{"version":3,"file":"main.js","mappings":"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","sources":["webpack://european_football/./src/index.js"],"sourcesContent":["\nlet countrySelected = false;\nlet svg;\nlet selectDifferentBtn;\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    // Add the welcome message container and button dynamically\n    const welcomeMessageContainer = document.createElement('div');\n    welcomeMessageContainer.id = 'welcome-message';\n    welcomeMessageContainer.classList.add('welcome-message');\n    welcomeMessageContainer.innerHTML = `\n    <p>\n      Welcome to European Football. Planning on traveling to the old continent? Let us know the country and dates of your trip and we will show you the most exciting games going on during your trip.\n    </p>\n    <button id=\"close-message-btn\">Go ahead!</button>\n  `;\n    document.body.appendChild(welcomeMessageContainer);\n\n    // Check if the welcome message has been shown before\n    const isWelcomeMessageShown = localStorage.getItem('welcomeMessageShown');\n\n    // Get the welcome message container\n    const welcomeMessage = document.getElementById('welcome-message');\n\n    // Get the close button\n    const closeButton = document.getElementById('close-message-btn');\n\n    // Show the welcome message if it's the first visit\n    if (!isWelcomeMessageShown) {\n        welcomeMessage.style.display = 'block';\n    }\n\n    // Add click event listener to the close button\n    closeButton.addEventListener('click', () => {\n        // Hide the welcome message\n        welcomeMessage.style.display = 'none';\n        // Mark the welcome message as shown in local storage\n        localStorage.setItem('welcomeMessageShown', true);\n    });\n    \n\n    //declare the countries that will have interaction with the user\n    const highlightedCountries = ['Spain', 'Italy', 'France', 'Germany', 'United Kingdom'];\n    let selectedCountry = null;\n    \n\n    // Fetch the GeoJSON data using the Fetch API\n    fetch('assets/europe_features.json')\n        .then((response) => response.json())\n        .then((europeJSON) => {\n            const mapContainer = document.getElementById('map-container');\n            // Add a tooltip element to the map container\n            const tooltip = document.createElement(\"div\");\n            tooltip.className = \"tooltip\";\n            mapContainer.appendChild(tooltip);\n\n            // Create an SVG element for the map\n            svg = d3.select(mapContainer).append('svg');\n\n\n           \n            // Set the SVG dimensions\n            const width = 800;\n            const height = 600;\n            svg.attr('width', width).attr('height', height);\n\n            // Create a new group element (g) for the map paths\n            const mapGroup = svg.append('g');\n\n            // Draw the map using D3.js and the 'europeJSON' data\n            const projection = d3.geoMercator().fitSize([width, height], europeJSON);\n            const path = d3.geoPath().projection(projection);\n\n            const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', zoomed);\n\n            svg.call(zoom);\n\n            function zoomed(event) {\n                // Apply the zoom transformation to the mapGroup (g element)\n                mapGroup.attr('transform', event.transform);\n                mapGroup.attr('stroke-width', 1 / event.transform.k); // To maintain stroke width while zooming\n            }\n\n            // Define a function to reset the fill color of the map paths to \"lightgreen\"\n            function resetMapColors() {\n                mapGroup\n                    .selectAll('path')\n                    .attr('fill', (feature) => {\n                        // Check if the current country is in the highlightedCountries array\n                        if (highlightedCountries.includes(feature.properties.name)) {\n                            return 'lightgreen'; // Apply lightgreen color for the highlighted countries\n                        } else {\n                            return 'gray'; // Apply gray color for other countries\n                        }\n                    });\n                }\n\n            mapGroup\n                .selectAll('path')\n                .data(europeJSON.features)\n                .enter()\n                .append('path')\n                .attr('d', path)\n                .attr('stroke', 'black')\n                .attr('fill', (feature) => {\n                    // Check if the current country is in the highlightedCountries array\n                    if (highlightedCountries.includes(feature.properties.name)) {\n                        return 'lightgreen'; // Apply lightblue color for the highlighted countries\n                    } else {\n                        return 'gray'; // Apply gray color for other countries\n                    }\n                })\n                .style('cursor', (feature) => {\n                    // Set the cursor to \"pointer\" for the highlighted countries\n                    return highlightedCountries.includes(feature.properties.name) ? 'pointer' : 'default';\n                })\n\n                //creating a tooltip with the name of the country\n                .on('mouseover', (event, feature) => {\n                    // Check if the hovered country is in the highlighted countries list\n                    if (highlightedCountries.includes(feature.properties.name)) {\n                        // Position and display the tooltip\n                        tooltip.style.display = 'block';\n                        tooltip.style.left = `${event.pageX + 10}px`;\n                        tooltip.style.top = `${event.pageY - 25}px`; // Adjust the top position as needed\n                        tooltip.textContent = feature.properties.name;\n                    }\n                })\n\n                //erasing the tooltip when hovering off the country\n                .on('mouseout', () => {\n                    tooltip.style.display = 'none';\n                })\n                .on('click', function (event, feature) {\n                    // Check if the clicked country is in the highlightedCountries array\n                    if (highlightedCountries.includes(feature.properties.name)) {\n                        // Zoom in on click for the highlighted countries\n                        if(selectedCountry){\n                             resetMapColors();\n                            document.getElementById('games-list').innerHTML = '';//clear the list of games\n                        }\n                        const [[x0, y0], [x1, y1]] = path.bounds(feature); // Get the bounding box of the clicked country\n                        const [cx, cy] = [(x0 + x1) / 2, (y0 + y1) / 2]; // Calculate the centroid of the bounding box\n                        const scale = 3; // Set the desired scale factor for zooming in\n                        countrySelected = true;\n                        if (feature.properties.name === 'United Kingdom'){\n                            selectedCountry = 'England';\n                        } else {\n                            selectedCountry = feature.properties.name;\n                        }\n                        \n\n                        // Calculate the translation to keep the clicked country centered\n                        const translate = [width / 2 - scale * cx, height / 2 - scale * cy];\n\n                        // Apply the zoom transformation to the mapGroup (g element) with transition\n                        mapGroup\n                            .transition()\n                            .duration(750)\n                            .attr('transform', `translate(${translate[0]}, ${translate[1]}) scale(${scale})`);\n\n                        // Change color on click\n                        mapCountry = d3.select(this);\n                        mapCountry.attr('fill', 'green');\n                        const message = document.getElementById('message');\n                        const datesForm = document.getElementById('dates-form');\n                        if (selectedCountry) {\n                            message.innerHTML = `<p>Select the dates for your trip to ${selectedCountry}.</p>`;\n                            datesForm.style.display = 'block';\n                        } else {\n                            message.innerHTML = `<p>Select the country for your next trip.</p>`;\n                            datesForm.style.display = 'none';\n                        }\n                    }\n          \n            });\n            \n        })\n        .catch((error) => {\n            console.error('Error fetching JSON:', error);\n        });\n\n   \n\n        // Function to load JSON data for the selected country's teams\n    async function loadCountryTeamCalendars(selectedCountry) {\n        const teamFiles = {\n            'Spain': ['atletico.json', 'barcelona.json', 'madrid.json'],\n            'England': ['arsenal.json', 'chelsea.json', 'liverpool.json', 'mancity.json', 'manutd.json'],\n            'France': ['paris.json', 'olympique.json'],\n            'Italy': ['inter.json', 'juventus.json', 'milan.json'],\n            'Germany': ['bayern.json', 'borussia.json']\n        };\n\n        const teamCalendars = [];\n        try {\n            if (selectedCountry in teamFiles) {\n                const countryTeams = teamFiles[selectedCountry];\n                for (const teamFile of countryTeams) {\n                    const response = await fetch(`../assets/calendars/${selectedCountry}/${teamFile}`);\n                    const teamCalendar = await response.json();\n                    teamCalendars.push(teamCalendar);\n                }\n            } else {\n                console.error('No team calendars found for the selected country.');\n            }\n            return teamCalendars;\n        } catch (error) {\n            console.error('Error fetching team calendars:', error);\n            return [];\n        }\n    }\n\n    // get the user trip dates\n    // Submit event listener for the dates form\n    const tripForm = document.getElementById('trip-form');\n    const datesForm = document.getElementById('dates-form');\n    tripForm.addEventListener('submit', async (event) => {\n        event.preventDefault();\n        const startDate = document.getElementById('start-date').value;\n        const endDate = document.getElementById('end-date').value;\n        if (selectedCountry && startDate && endDate) {\n            // Display the trip info\n            datesForm.style.display = 'none'; // Hide the dates form\n            const tripMessage = `In ${selectedCountry} from ${startDate} to ${endDate}, there will be the next games:`;\n            document.getElementById('message').innerText = tripMessage;\n\n            // Load JSON data for the selected country's teams\n            const teamCalendars = await loadCountryTeamCalendars(selectedCountry);\n            if (teamCalendars.length > 0) {\n                // Filter games based on the user's selected dates\n                const selectedGames = teamCalendars.flatMap((teamCalendar) =>\n                    teamCalendar.filter(\n                        (game) => game.DateUtc >= startDate && game.DateUtc <= endDate\n                    )\n                );\n\n                // Display the selected games \n                displayGames(selectedGames)\n\n                console.log(selectedGames);\n            } else {\n                console.error('No team calendars found for the selected country.');\n            }\n        }\n    });\n   \n   \n});\n\nfunction displayGames(games) {\n    const gamesList = document.getElementById('games-list');\n    const gamesListWrapper = document.getElementById('games-list-wrapper');\n    gamesList.innerHTML = ''; // Clear the existing list\n\n    if (games.length > 0){\n\n    \n        games.forEach((game) => {\n            const { DateUtc, HomeTeam, AwayTeam, Location } = game;\n            const gameDate = new Date(DateUtc);\n            const options = { weekday: 'short', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' };\n            const formattedDate = gameDate.toLocaleString('en-US', options);\n            const listItem = document.createElement('li');\n            listItem.textContent = `${formattedDate} ${HomeTeam} vs ${AwayTeam}, stadium: ${Location}`;\n            gamesList.appendChild(listItem);\n        });\n        // Show the games list container\n        gamesListWrapper.style.display = 'block';\n    } else {\n        const noGamesMessage = `In ${selectedCountry} from ${startDate} to ${endDate}, there will not be any games, please choose different dates.`;\n        document.getElementById('message').innerText = noGamesMessage;\n        // Hide the games list container\n        gamesListWrapper.style.display = 'none';\n    }\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    // Map of team names to their respective team IDs\n    const teamIds = {\n        arsenal: 42,\n        chelsea: 49,\n        liverpool: 40,\n        manuntd: 33,\n        mancity: 50,\n        olympique: 81,\n        paris: 85,\n        bayern: 157,\n        borussia: 165,\n        juventus: 496,\n        milan: 489,\n        inter: 505,\n        barcelona: 529,\n        atletico: 530,\n        madrid: 541\n    };\n\n    // Add click event listeners to team icons\n    const teamIcons = document.querySelectorAll(\".team-icons img\");\n    teamIcons.forEach((icon) => {\n        icon.addEventListener(\"click\", () => {\n            // Get the team name from the alt attribute of the clicked icon\n            const teamName = icon.alt.toLowerCase();\n            // Get the corresponding team ID from the teamIds object\n            const teamId = teamIds[teamName];\n            // Redirect to team.html with the teamId as a query parameter\n            window.location.href = `team.html?id=${teamId}`;\n        });\n    });\n});\n\n\nconst leagueIds = {\n    england: 39,\n    germany: 78,\n    spain: 140,\n    italy: 135,\n    france: 61\n}\nconsole.log('updated')"],"names":["svg","countrySelected","displayGames","games","gamesList","document","getElementById","gamesListWrapper","innerHTML","length","forEach","game","DateUtc","HomeTeam","AwayTeam","Location","formattedDate","Date","toLocaleString","weekday","month","day","hour","minute","listItem","createElement","textContent","appendChild","style","display","noGamesMessage","selectedCountry","startDate","endDate","innerText","addEventListener","welcomeMessageContainer","id","classList","add","body","isWelcomeMessageShown","localStorage","getItem","welcomeMessage","closeButton","setItem","highlightedCountries","fetch","then","response","json","europeJSON","mapContainer","tooltip","className","d3","select","append","attr","mapGroup","projection","geoMercator","fitSize","path","geoPath","zoom","scaleExtent","on","event","transform","k","call","selectAll","data","features","enter","feature","includes","properties","name","left","pageX","top","pageY","x0","y0","x1","y1","bounds","cx","cy","scale","translate","width","height","transition","duration","mapCountry","this","message","datesForm","catch","error","console","tripForm","async","preventDefault","value","tripMessage","teamCalendars","teamFiles","countryTeams","teamFile","teamCalendar","push","loadCountryTeamCalendars","selectedGames","flatMap","filter","log","teamIds","arsenal","chelsea","liverpool","manuntd","mancity","olympique","paris","bayern","borussia","juventus","milan","inter","barcelona","atletico","madrid","querySelectorAll","icon","teamName","alt","toLowerCase","teamId","window","location","href"],"sourceRoot":""}