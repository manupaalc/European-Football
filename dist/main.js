/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("let countrySelected = false;\nlet svg;\nlet selectDifferentBtn;\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Add the welcome message container and button dynamically\n  const welcomeMessageContainer = document.createElement('div');\n  welcomeMessageContainer.id = 'welcome-message';\n  welcomeMessageContainer.classList.add('welcome-message');\n  welcomeMessageContainer.innerHTML = `\n    <p>\n      Welcome to European Football. Planning on traveling to the old continent? Let us know the country and dates of your trip and we will show you the most exciting games going on during your trip.\n    </p>\n    <button id=\"close-message-btn\">Go ahead!</button>\n  `;\n  document.body.appendChild(welcomeMessageContainer);\n\n  // Check if the welcome message has been shown before\n  const isWelcomeMessageShown = localStorage.getItem('welcomeMessageShown');\n\n  // Get the welcome message container\n  const welcomeMessage = document.getElementById('welcome-message');\n\n  // Get the close button\n  const closeButton = document.getElementById('close-message-btn');\n\n  // Show the welcome message if it's the first visit\n  if (!isWelcomeMessageShown) {\n    welcomeMessage.style.display = 'block';\n  }\n\n  // Add click event listener to the close button\n  closeButton.addEventListener('click', () => {\n    // Hide the welcome message\n    welcomeMessage.style.display = 'none';\n    // Mark the welcome message as shown in local storage\n    localStorage.setItem('welcomeMessageShown', true);\n  });\n\n  //declare the countries that will have interaction with the user\n  const highlightedCountries = ['Spain', 'Italy', 'France', 'Germany', 'United Kingdom', 'Portugal'];\n  let selectedCountry = null;\n\n  // Fetch the GeoJSON data using the Fetch API\n  fetch('assets/europe_features.json').then(response => response.json()).then(europeJSON => {\n    const mapContainer = document.getElementById('map-container');\n    // Add a tooltip element to the map container\n    const tooltip = document.createElement(\"div\");\n    tooltip.className = \"tooltip\";\n    mapContainer.appendChild(tooltip);\n\n    // Create an SVG element for the map\n    svg = d3.select(mapContainer).append('svg');\n\n    // Set the SVG dimensions\n    const width = 800;\n    const height = 600;\n    svg.attr('width', width).attr('height', height);\n\n    // Create a new group element (g) for the map paths\n    const mapGroup = svg.append('g');\n\n    // Draw the map using D3.js and the 'europeJSON' data\n    const projection = d3.geoMercator().fitSize([width, height], europeJSON);\n    const path = d3.geoPath().projection(projection);\n    const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', zoomed);\n    svg.call(zoom);\n    function zoomed(event) {\n      // Apply the zoom transformation to the mapGroup (g element)\n      mapGroup.attr('transform', event.transform);\n      mapGroup.attr('stroke-width', 1 / event.transform.k); // To maintain stroke width while zooming\n    }\n\n    // Define a function to reset the fill color of the map paths to \"lightgreen\"\n    function resetMapColors() {\n      mapGroup.selectAll('path').attr('fill', feature => {\n        // Check if the current country is in the highlightedCountries array\n        if (highlightedCountries.includes(feature.properties.name)) {\n          return 'lightgreen'; // Apply lightgreen color for the highlighted countries\n        } else {\n          return 'gray'; // Apply gray color for other countries\n        }\n      });\n    }\n\n    mapGroup.selectAll('path').data(europeJSON.features).enter().append('path').attr('d', path).attr('stroke', 'black').attr('fill', feature => {\n      // Check if the current country is in the highlightedCountries array\n      if (highlightedCountries.includes(feature.properties.name)) {\n        return 'lightgreen'; // Apply lightblue color for the highlighted countries\n      } else {\n        return 'gray'; // Apply gray color for other countries\n      }\n    }).style('cursor', feature => {\n      // Set the cursor to \"pointer\" for the highlighted countries\n      return highlightedCountries.includes(feature.properties.name) ? 'pointer' : 'default';\n    })\n\n    //creating a tooltip with the name of the country\n    .on('mouseover', (event, feature) => {\n      // Check if the hovered country is in the highlighted countries list\n      if (highlightedCountries.includes(feature.properties.name)) {\n        // Position and display the tooltip\n        tooltip.style.display = 'block';\n        tooltip.style.left = `${event.pageX + 10}px`;\n        tooltip.style.top = `${event.pageY - 25}px`; // Adjust the top position as needed\n        tooltip.textContent = feature.properties.name;\n      }\n    })\n\n    //erasing the tooltip when hovering off the country\n    .on('mouseout', () => {\n      tooltip.style.display = 'none';\n    }).on('click', function (event, feature) {\n      // Check if the clicked country is in the highlightedCountries array\n      if (highlightedCountries.includes(feature.properties.name)) {\n        // Zoom in on click for the highlighted countries\n        if (selectedCountry) {\n          resetMapColors();\n          document.getElementById('games-list').innerHTML = ''; //clear the list of games\n        }\n\n        const [[x0, y0], [x1, y1]] = path.bounds(feature); // Get the bounding box of the clicked country\n        const [cx, cy] = [(x0 + x1) / 2, (y0 + y1) / 2]; // Calculate the centroid of the bounding box\n        const scale = 3; // Set the desired scale factor for zooming in\n        countrySelected = true;\n        if (feature.properties.name === 'United Kingdom') {\n          selectedCountry = 'England';\n        } else {\n          selectedCountry = feature.properties.name;\n        }\n\n        // Calculate the translation to keep the clicked country centered\n        const translate = [width / 2 - scale * cx, height / 2 - scale * cy];\n\n        // Apply the zoom transformation to the mapGroup (g element) with transition\n        mapGroup.transition().duration(750).attr('transform', `translate(${translate[0]}, ${translate[1]}) scale(${scale})`);\n\n        // Change color on click\n        mapCountry = d3.select(this);\n        mapCountry.attr('fill', 'green');\n        const message = document.getElementById('message');\n        const datesForm = document.getElementById('dates-form');\n        if (selectedCountry) {\n          message.innerHTML = `<p>Select the dates for your trip to ${selectedCountry}.</p>`;\n          datesForm.style.display = 'block';\n        } else {\n          message.innerHTML = `<p>Select the country for your next trip.</p>`;\n          datesForm.style.display = 'none';\n        }\n      }\n    });\n  }).catch(error => {\n    console.error('Error fetching JSON:', error);\n  });\n\n  // Function to load JSON data for the selected country's teams\n  async function loadCountryTeamCalendars(selectedCountry) {\n    const teamFiles = {\n      'Spain': ['atletico.json', 'barcelona.json', 'madrid.json'],\n      'England': ['arsenal.json', 'chelsea.json', 'liverpool.json', 'mancity.json', 'manutd.json'],\n      'France': ['paris.json', 'olympique.json'],\n      'Italy': ['inter.json', 'juventus.json', 'milan.json'],\n      'Germany': ['bayern.json', 'borussia.json'],\n      'Portugal': ['porto.json', 'benfica.json']\n    };\n    const teamCalendars = [];\n    try {\n      if (selectedCountry in teamFiles) {\n        const countryTeams = teamFiles[selectedCountry];\n        for (const teamFile of countryTeams) {\n          const response = await fetch(`assets/calendars/${selectedCountry}/${teamFile}`);\n          const teamCalendar = await response.json();\n          teamCalendars.push(teamCalendar);\n        }\n      } else {\n        console.error('No team calendars found for the selected country.');\n      }\n      return teamCalendars;\n    } catch (error) {\n      console.error('Error fetching team calendars:', error);\n      return [];\n    }\n  }\n\n  // get the user trip dates\n  // Submit event listener for the dates form\n  const tripForm = document.getElementById('trip-form');\n  const datesForm = document.getElementById('dates-form');\n  tripForm.addEventListener('submit', async event => {\n    event.preventDefault();\n    const startDate = document.getElementById('start-date').value;\n    const endDate = document.getElementById('end-date').value;\n    if (selectedCountry && startDate && endDate) {\n      // Display the trip info\n      datesForm.style.display = 'none'; // Hide the dates form\n      const tripMessage = `In ${selectedCountry} from ${startDate} to ${endDate}, there will be the next games:`;\n      document.getElementById('message').innerText = tripMessage;\n\n      // Load JSON data for the selected country's teams\n      const teamCalendars = await loadCountryTeamCalendars(selectedCountry);\n      if (teamCalendars.length > 0) {\n        // Filter games based on the user's selected dates\n        const selectedGames = teamCalendars.flatMap(teamCalendar => teamCalendar.filter(game => game.DateUtc >= startDate && game.DateUtc <= endDate));\n\n        // Display the selected games \n        displayGames(selectedGames);\n        console.log(selectedGames);\n      } else {\n        console.error('No team calendars found for the selected country.');\n      }\n    }\n  });\n});\nfunction displayGames(games) {\n  const gamesList = document.getElementById('games-list');\n  const gamesListWrapper = document.getElementById('games-list-wrapper');\n  gamesList.innerHTML = ''; // Clear the existing list\n\n  if (games.length > 0) {\n    games.forEach(game => {\n      const {\n        DateUtc,\n        HomeTeam,\n        AwayTeam,\n        Location\n      } = game;\n      const gameDate = new Date(DateUtc);\n      const options = {\n        weekday: 'short',\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric'\n      };\n      const formattedDate = gameDate.toLocaleString('en-US', options);\n      const listItem = document.createElement('li');\n      listItem.textContent = `${formattedDate} ${HomeTeam} vs ${AwayTeam}, stadium: ${Location}`;\n      gamesList.appendChild(listItem);\n    });\n    // Show the games list container\n    gamesListWrapper.style.display = 'block';\n  } else {\n    const noGamesMessage = `In ${selectedCountry} from ${startDate} to ${endDate}, there will not be any games, please choose different dates.`;\n    document.getElementById('message').innerText = noGamesMessage;\n    // Hide the games list container\n    gamesListWrapper.style.display = 'none';\n  }\n}\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Map of team names to their respective team IDs\n  const teamIds = {\n    arsenal: 42,\n    chelsea: 49,\n    liverpool: 40,\n    manuntd: 33,\n    mancity: 50,\n    olympique: 81,\n    paris: 85,\n    bayern: 157,\n    borussia: 165,\n    juventus: 496,\n    milan: 489,\n    inter: 505,\n    barcelona: 529,\n    atletico: 530,\n    madrid: 541\n  };\n\n  // Add click event listeners to team icons\n  const teamIcons = document.querySelectorAll(\".team-icons img\");\n  teamIcons.forEach(icon => {\n    icon.addEventListener(\"click\", () => {\n      // Get the team name from the alt attribute of the clicked icon\n      const teamName = icon.alt.toLowerCase();\n      // Get the corresponding team ID from the teamIds object\n      const teamId = teamIds[teamName];\n      // Redirect to team.html with the teamId as a query parameter\n      window.location.href = `team.html?id=${teamId}`;\n    });\n  });\n});\nconst leagueIds = {\n  england: 39,\n  germany: 78,\n  spain: 140,\n  italy: 135,\n  france: 61,\n  portugal: 94\n};\nconsole.log('updated');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldXJvcGVhbl9mb290YmFsbC8uL3NyYy9pbmRleC5zY3NzPzhlYjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;