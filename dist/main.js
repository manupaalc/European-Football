/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("let countrySelected = false;\nlet svg;\nlet selectDifferentBtn;\ndocument.addEventListener('DOMContentLoaded', () => {\n  const highlightedCountries = ['Spain', 'Italy', 'France', 'Germany', 'United Kingdom'];\n  let selectedCountry = null;\n\n  // Fetch the GeoJSON data using the Fetch API\n  fetch('../assets/europe_features.json').then(response => response.json()).then(europeJSON => {\n    const mapContainer = document.getElementById('map-container');\n    // Add a tooltip element to the map container\n    const tooltip = document.createElement(\"div\");\n    tooltip.className = \"tooltip\";\n    mapContainer.appendChild(tooltip);\n\n    // Create an SVG element for the map\n    svg = d3.select(mapContainer).append('svg');\n\n    // Set the SVG dimensions\n    const width = 800;\n    const height = 600;\n    svg.attr('width', width).attr('height', height);\n\n    // Create a new group element (g) for the map paths\n    const mapGroup = svg.append('g');\n\n    // Draw the map using D3.js and the 'europeJSON' data\n    const projection = d3.geoMercator().fitSize([width, height], europeJSON);\n    const path = d3.geoPath().projection(projection);\n    const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', zoomed);\n    svg.call(zoom);\n    function zoomed(event) {\n      // Apply the zoom transformation to the mapGroup (g element)\n      mapGroup.attr('transform', event.transform);\n      mapGroup.attr('stroke-width', 1 / event.transform.k); // To maintain stroke width while zooming\n    }\n\n    // Define a function to reset the fill color of the map paths to \"lightgreen\"\n    function resetMapColors() {\n      mapGroup.selectAll('path').attr('fill', feature => {\n        // Check if the current country is in the highlightedCountries array\n        if (highlightedCountries.includes(feature.properties.name)) {\n          return 'lightgreen'; // Apply lightgreen color for the highlighted countries\n        } else {\n          return 'gray'; // Apply gray color for other countries\n        }\n      });\n    }\n\n    mapGroup.selectAll('path').data(europeJSON.features).enter().append('path').attr('d', path).attr('stroke', 'black').attr('fill', feature => {\n      // Check if the current country is in the highlightedCountries array\n      if (highlightedCountries.includes(feature.properties.name)) {\n        return 'lightgreen'; // Apply lightblue color for the highlighted countries\n      } else {\n        return 'gray'; // Apply gray color for other countries\n      }\n    }).style('cursor', feature => {\n      // Set the cursor to \"pointer\" for the highlighted countries\n      return highlightedCountries.includes(feature.properties.name) ? 'pointer' : 'default';\n    })\n\n    //creating a tooltip with the name of the country\n    .on('mouseover', (event, feature) => {\n      // Check if the hovered country is in the highlighted countries list\n      if (highlightedCountries.includes(feature.properties.name)) {\n        // Position and display the tooltip\n        tooltip.style.display = 'block';\n        tooltip.style.left = `${event.pageX + 10}px`;\n        tooltip.style.top = `${event.pageY - 25}px`; // Adjust the top position as needed\n        tooltip.textContent = feature.properties.name;\n      }\n    })\n\n    //erasing the tooltip when hovering off the country\n    .on('mouseout', () => {\n      tooltip.style.display = 'none';\n    }).on('click', function (event, feature) {\n      // Check if the clicked country is in the highlightedCountries array\n      if (highlightedCountries.includes(feature.properties.name)) {\n        // Zoom in on click for the highlighted countries\n        if (selectedCountry) {\n          resetMapColors();\n          document.getElementById('games-list').innerHTML = ''; //clear the list of games\n        }\n\n        const [[x0, y0], [x1, y1]] = path.bounds(feature); // Get the bounding box of the clicked country\n        const [cx, cy] = [(x0 + x1) / 2, (y0 + y1) / 2]; // Calculate the centroid of the bounding box\n        const scale = 3; // Set the desired scale factor for zooming in\n        countrySelected = true;\n        if (feature.properties.name === 'United Kingdom') {\n          selectedCountry = 'England';\n        } else {\n          selectedCountry = feature.properties.name;\n        }\n\n        // Calculate the translation to keep the clicked country centered\n        const translate = [width / 2 - scale * cx, height / 2 - scale * cy];\n\n        // Apply the zoom transformation to the mapGroup (g element) with transition\n        mapGroup.transition().duration(750).attr('transform', `translate(${translate[0]}, ${translate[1]}) scale(${scale})`);\n\n        // Change color on click\n        mapCountry = d3.select(this);\n        mapCountry.attr('fill', 'green');\n        const message = document.getElementById('message');\n        const datesForm = document.getElementById('dates-form');\n        if (selectedCountry) {\n          message.innerHTML = `<p>Select the dates for your trip to ${selectedCountry}.</p>`;\n          datesForm.style.display = 'block';\n        } else {\n          message.innerHTML = `<p>Select the country for your next trip.</p>`;\n          datesForm.style.display = 'none';\n        }\n      }\n    });\n  }).catch(error => {\n    console.error('Error fetching JSON:', error);\n  });\n\n  // Function to load JSON data for the selected country's teams\n  async function loadCountryTeamCalendars(selectedCountry) {\n    const teamFiles = {\n      'Spain': ['atletico.json', 'barcelona.json', 'madrid.json'],\n      'England': ['arsenal.json', 'chelsea.json', 'liverpool.json', 'mancity.json', 'manutd.json'],\n      'France': ['paris.json', 'olympique.json'],\n      'Italy': ['inter.json', 'juventus.json', 'milan.json'],\n      'Germany': ['bayern.json', 'borussia.json']\n    };\n    const teamCalendars = [];\n    try {\n      if (selectedCountry in teamFiles) {\n        const countryTeams = teamFiles[selectedCountry];\n        for (const teamFile of countryTeams) {\n          const response = await fetch(`../assets/calendars/${selectedCountry}/${teamFile}`);\n          const teamCalendar = await response.json();\n          teamCalendars.push(teamCalendar);\n        }\n      } else {\n        console.error('No team calendars found for the selected country.');\n      }\n      return teamCalendars;\n    } catch (error) {\n      console.error('Error fetching team calendars:', error);\n      return [];\n    }\n  }\n\n  // get the user trip dates\n  // Submit event listener for the dates form\n  const tripForm = document.getElementById('trip-form');\n  const datesForm = document.getElementById('dates-form');\n  tripForm.addEventListener('submit', async event => {\n    event.preventDefault();\n    const startDate = document.getElementById('start-date').value;\n    const endDate = document.getElementById('end-date').value;\n    if (selectedCountry && startDate && endDate) {\n      // Display the trip info\n      datesForm.style.display = 'none'; // Hide the dates form\n      const tripMessage = `In ${selectedCountry} from ${startDate} to ${endDate}, there will be the next games:`;\n      document.getElementById('message').innerText = tripMessage;\n\n      // Load JSON data for the selected country's teams\n      const teamCalendars = await loadCountryTeamCalendars(selectedCountry);\n      if (teamCalendars.length > 0) {\n        // Filter games based on the user's selected dates\n        const selectedGames = teamCalendars.flatMap(teamCalendar => teamCalendar.filter(game => game.DateUtc >= startDate && game.DateUtc <= endDate));\n\n        // Display the selected games \n        displayGames(selectedGames);\n        console.log(selectedGames);\n      } else {\n        console.error('No team calendars found for the selected country.');\n      }\n    }\n  });\n});\nfunction displayGames(games) {\n  const gamesList = document.getElementById('games-list');\n  gamesList.innerHTML = ''; // Clear the existing list\n\n  if (games.length > 0) {\n    games.forEach(game => {\n      const {\n        DateUtc,\n        HomeTeam,\n        AwayTeam,\n        Location\n      } = game;\n      const gameDate = new Date(DateUtc);\n      const options = {\n        weekday: 'short',\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric'\n      };\n      const formattedDate = gameDate.toLocaleString('en-US', options);\n      const listItem = document.createElement('li');\n      listItem.textContent = `${formattedDate} ${HomeTeam} vs ${AwayTeam}, stadium: ${Location}`;\n      gamesList.appendChild(listItem);\n    });\n  } else {\n    const noGamesMessage = `In ${selectedCountry} from ${startDate} to ${endDate}, there will not be any games, please choose different dates.`;\n    document.getElementById('message').innerText = noGamesMessage;\n  }\n}\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Map of team names to their respective team IDs\n  const teamIds = {\n    arsenal: 42,\n    chelsea: 49,\n    liverpool: 40,\n    manuntd: 33,\n    mancity: 50,\n    olympique: 81,\n    paris: 85,\n    bayern: 157,\n    borussia: 165,\n    juventus: 496,\n    milan: 489,\n    inter: 505,\n    barcelona: 529,\n    atletico: 530,\n    madrid: 541\n  };\n\n  // Add click event listeners to team icons\n  const teamIcons = document.querySelectorAll(\".team-icons img\");\n  teamIcons.forEach(icon => {\n    icon.addEventListener(\"click\", () => {\n      // Get the team name from the alt attribute of the clicked icon\n      const teamName = icon.alt.toLowerCase();\n      // Get the corresponding team ID from the teamIds object\n      const teamId = teamIds[teamName];\n      // Redirect to team.html with the teamId as a query parameter\n      window.location.href = `team.html?id=${teamId}`;\n    });\n  });\n});\nconst leagueIds = {\n  england: 39,\n  germany: 78,\n  spain: 140,\n  italy: 135,\n  france: 61\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJuYW1lcyI6WyJjb3VudHJ5U2VsZWN0ZWQiLCJzdmciLCJzZWxlY3REaWZmZXJlbnRCdG4iLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJoaWdobGlnaHRlZENvdW50cmllcyIsInNlbGVjdGVkQ291bnRyeSIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsImV1cm9wZUpTT04iLCJtYXBDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsInRvb2x0aXAiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYXBwZW5kQ2hpbGQiLCJkMyIsInNlbGVjdCIsImFwcGVuZCIsIndpZHRoIiwiaGVpZ2h0IiwiYXR0ciIsIm1hcEdyb3VwIiwicHJvamVjdGlvbiIsImdlb01lcmNhdG9yIiwiZml0U2l6ZSIsInBhdGgiLCJnZW9QYXRoIiwiem9vbSIsInNjYWxlRXh0ZW50Iiwib24iLCJ6b29tZWQiLCJjYWxsIiwiZXZlbnQiLCJ0cmFuc2Zvcm0iLCJrIiwicmVzZXRNYXBDb2xvcnMiLCJzZWxlY3RBbGwiLCJmZWF0dXJlIiwiaW5jbHVkZXMiLCJwcm9wZXJ0aWVzIiwibmFtZSIsImRhdGEiLCJmZWF0dXJlcyIsImVudGVyIiwic3R5bGUiLCJkaXNwbGF5IiwibGVmdCIsInBhZ2VYIiwidG9wIiwicGFnZVkiLCJ0ZXh0Q29udGVudCIsImlubmVySFRNTCIsIngwIiwieTAiLCJ4MSIsInkxIiwiYm91bmRzIiwiY3giLCJjeSIsInNjYWxlIiwidHJhbnNsYXRlIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwibWFwQ291bnRyeSIsIm1lc3NhZ2UiLCJkYXRlc0Zvcm0iLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImxvYWRDb3VudHJ5VGVhbUNhbGVuZGFycyIsInRlYW1GaWxlcyIsInRlYW1DYWxlbmRhcnMiLCJjb3VudHJ5VGVhbXMiLCJ0ZWFtRmlsZSIsInRlYW1DYWxlbmRhciIsInB1c2giLCJ0cmlwRm9ybSIsInByZXZlbnREZWZhdWx0Iiwic3RhcnREYXRlIiwidmFsdWUiLCJlbmREYXRlIiwidHJpcE1lc3NhZ2UiLCJpbm5lclRleHQiLCJsZW5ndGgiLCJzZWxlY3RlZEdhbWVzIiwiZmxhdE1hcCIsImZpbHRlciIsImdhbWUiLCJEYXRlVXRjIiwiZGlzcGxheUdhbWVzIiwibG9nIiwiZ2FtZXMiLCJnYW1lc0xpc3QiLCJmb3JFYWNoIiwiSG9tZVRlYW0iLCJBd2F5VGVhbSIsIkxvY2F0aW9uIiwiZ2FtZURhdGUiLCJEYXRlIiwib3B0aW9ucyIsIndlZWtkYXkiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJmb3JtYXR0ZWREYXRlIiwidG9Mb2NhbGVTdHJpbmciLCJsaXN0SXRlbSIsIm5vR2FtZXNNZXNzYWdlIiwidGVhbUlkcyIsImFyc2VuYWwiLCJjaGVsc2VhIiwibGl2ZXJwb29sIiwibWFudW50ZCIsIm1hbmNpdHkiLCJvbHltcGlxdWUiLCJwYXJpcyIsImJheWVybiIsImJvcnVzc2lhIiwianV2ZW50dXMiLCJtaWxhbiIsImludGVyIiwiYmFyY2Vsb25hIiwiYXRsZXRpY28iLCJtYWRyaWQiLCJ0ZWFtSWNvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaWNvbiIsInRlYW1OYW1lIiwiYWx0IiwidG9Mb3dlckNhc2UiLCJ0ZWFtSWQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJsZWFndWVJZHMiLCJlbmdsYW5kIiwiZ2VybWFueSIsInNwYWluIiwiaXRhbHkiLCJmcmFuY2UiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL2V1cm9wZWFuX2Zvb3RiYWxsLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiXG5sZXQgY291bnRyeVNlbGVjdGVkID0gZmFsc2U7XG5sZXQgc3ZnO1xubGV0IHNlbGVjdERpZmZlcmVudEJ0bjtcblxuXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gIFxuICAgIGNvbnN0IGhpZ2hsaWdodGVkQ291bnRyaWVzID0gWydTcGFpbicsICdJdGFseScsICdGcmFuY2UnLCAnR2VybWFueScsICdVbml0ZWQgS2luZ2RvbSddO1xuICAgIGxldCBzZWxlY3RlZENvdW50cnkgPSBudWxsO1xuICAgIFxuXG4gICAgLy8gRmV0Y2ggdGhlIEdlb0pTT04gZGF0YSB1c2luZyB0aGUgRmV0Y2ggQVBJXG4gICAgZmV0Y2goJy4uL2Fzc2V0cy9ldXJvcGVfZmVhdHVyZXMuanNvbicpXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAudGhlbigoZXVyb3BlSlNPTikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWFwQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1jb250YWluZXInKTtcbiAgICAgICAgICAgIC8vIEFkZCBhIHRvb2x0aXAgZWxlbWVudCB0byB0aGUgbWFwIGNvbnRhaW5lclxuICAgICAgICAgICAgY29uc3QgdG9vbHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB0b29sdGlwLmNsYXNzTmFtZSA9IFwidG9vbHRpcFwiO1xuICAgICAgICAgICAgbWFwQ29udGFpbmVyLmFwcGVuZENoaWxkKHRvb2x0aXApO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYW4gU1ZHIGVsZW1lbnQgZm9yIHRoZSBtYXBcbiAgICAgICAgICAgIHN2ZyA9IGQzLnNlbGVjdChtYXBDb250YWluZXIpLmFwcGVuZCgnc3ZnJyk7XG5cblxuICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNldCB0aGUgU1ZHIGRpbWVuc2lvbnNcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gODAwO1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gNjAwO1xuICAgICAgICAgICAgc3ZnLmF0dHIoJ3dpZHRoJywgd2lkdGgpLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBncm91cCBlbGVtZW50IChnKSBmb3IgdGhlIG1hcCBwYXRoc1xuICAgICAgICAgICAgY29uc3QgbWFwR3JvdXAgPSBzdmcuYXBwZW5kKCdnJyk7XG5cbiAgICAgICAgICAgIC8vIERyYXcgdGhlIG1hcCB1c2luZyBEMy5qcyBhbmQgdGhlICdldXJvcGVKU09OJyBkYXRhXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0aW9uID0gZDMuZ2VvTWVyY2F0b3IoKS5maXRTaXplKFt3aWR0aCwgaGVpZ2h0XSwgZXVyb3BlSlNPTik7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gZDMuZ2VvUGF0aCgpLnByb2plY3Rpb24ocHJvamVjdGlvbik7XG5cbiAgICAgICAgICAgIGNvbnN0IHpvb20gPSBkMy56b29tKCkuc2NhbGVFeHRlbnQoWzEsIDhdKS5vbignem9vbScsIHpvb21lZCk7XG5cbiAgICAgICAgICAgIHN2Zy5jYWxsKHpvb20pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB6b29tZWQoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBBcHBseSB0aGUgem9vbSB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgbWFwR3JvdXAgKGcgZWxlbWVudClcbiAgICAgICAgICAgICAgICBtYXBHcm91cC5hdHRyKCd0cmFuc2Zvcm0nLCBldmVudC50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgIG1hcEdyb3VwLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDEgLyBldmVudC50cmFuc2Zvcm0uayk7IC8vIFRvIG1haW50YWluIHN0cm9rZSB3aWR0aCB3aGlsZSB6b29taW5nXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlZmluZSBhIGZ1bmN0aW9uIHRvIHJlc2V0IHRoZSBmaWxsIGNvbG9yIG9mIHRoZSBtYXAgcGF0aHMgdG8gXCJsaWdodGdyZWVuXCJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0TWFwQ29sb3JzKCkge1xuICAgICAgICAgICAgICAgIG1hcEdyb3VwXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsIChmZWF0dXJlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY3VycmVudCBjb3VudHJ5IGlzIGluIHRoZSBoaWdobGlnaHRlZENvdW50cmllcyBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodGVkQ291bnRyaWVzLmluY2x1ZGVzKGZlYXR1cmUucHJvcGVydGllcy5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnbGlnaHRncmVlbic7IC8vIEFwcGx5IGxpZ2h0Z3JlZW4gY29sb3IgZm9yIHRoZSBoaWdobGlnaHRlZCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdncmF5JzsgLy8gQXBwbHkgZ3JheSBjb2xvciBmb3Igb3RoZXIgY291bnRyaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWFwR3JvdXBcbiAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgICAgICAgICAgICAuZGF0YShldXJvcGVKU09OLmZlYXR1cmVzKVxuICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBwYXRoKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnYmxhY2snKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgKGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgY291bnRyeSBpcyBpbiB0aGUgaGlnaGxpZ2h0ZWRDb3VudHJpZXMgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodGVkQ291bnRyaWVzLmluY2x1ZGVzKGZlYXR1cmUucHJvcGVydGllcy5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdsaWdodGdyZWVuJzsgLy8gQXBwbHkgbGlnaHRibHVlIGNvbG9yIGZvciB0aGUgaGlnaGxpZ2h0ZWQgY291bnRyaWVzXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2dyYXknOyAvLyBBcHBseSBncmF5IGNvbG9yIGZvciBvdGhlciBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAoZmVhdHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGN1cnNvciB0byBcInBvaW50ZXJcIiBmb3IgdGhlIGhpZ2hsaWdodGVkIGNvdW50cmllc1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGlnaGxpZ2h0ZWRDb3VudHJpZXMuaW5jbHVkZXMoZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWUpID8gJ3BvaW50ZXInIDogJ2RlZmF1bHQnO1xuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAvL2NyZWF0aW5nIGEgdG9vbHRpcCB3aXRoIHRoZSBuYW1lIG9mIHRoZSBjb3VudHJ5XG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCAoZXZlbnQsIGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGhvdmVyZWQgY291bnRyeSBpcyBpbiB0aGUgaGlnaGxpZ2h0ZWQgY291bnRyaWVzIGxpc3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodGVkQ291bnRyaWVzLmluY2x1ZGVzKGZlYXR1cmUucHJvcGVydGllcy5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG9zaXRpb24gYW5kIGRpc3BsYXkgdGhlIHRvb2x0aXBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwLnN0eWxlLmxlZnQgPSBgJHtldmVudC5wYWdlWCArIDEwfXB4YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuc3R5bGUudG9wID0gYCR7ZXZlbnQucGFnZVkgLSAyNX1weGA7IC8vIEFkanVzdCB0aGUgdG9wIHBvc2l0aW9uIGFzIG5lZWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC50ZXh0Q29udGVudCA9IGZlYXR1cmUucHJvcGVydGllcy5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIC8vZXJhc2luZyB0aGUgdG9vbHRpcCB3aGVuIGhvdmVyaW5nIG9mZiB0aGUgY291bnRyeVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQsIGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNsaWNrZWQgY291bnRyeSBpcyBpbiB0aGUgaGlnaGxpZ2h0ZWRDb3VudHJpZXMgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodGVkQ291bnRyaWVzLmluY2x1ZGVzKGZlYXR1cmUucHJvcGVydGllcy5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gWm9vbSBpbiBvbiBjbGljayBmb3IgdGhlIGhpZ2hsaWdodGVkIGNvdW50cmllc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0ZWRDb3VudHJ5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXBDb2xvcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZXMtbGlzdCcpLmlubmVySFRNTCA9ICcnOy8vY2xlYXIgdGhlIGxpc3Qgb2YgZ2FtZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtbeDAsIHkwXSwgW3gxLCB5MV1dID0gcGF0aC5ib3VuZHMoZmVhdHVyZSk7IC8vIEdldCB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBjbGlja2VkIGNvdW50cnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtjeCwgY3ldID0gWyh4MCArIHgxKSAvIDIsICh5MCArIHkxKSAvIDJdOyAvLyBDYWxjdWxhdGUgdGhlIGNlbnRyb2lkIG9mIHRoZSBib3VuZGluZyBib3hcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gMzsgLy8gU2V0IHRoZSBkZXNpcmVkIHNjYWxlIGZhY3RvciBmb3Igem9vbWluZyBpblxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeVNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlLnByb3BlcnRpZXMubmFtZSA9PT0gJ1VuaXRlZCBLaW5nZG9tJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJ5ID0gJ0VuZ2xhbmQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdW50cnkgPSBmZWF0dXJlLnByb3BlcnRpZXMubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHRyYW5zbGF0aW9uIHRvIGtlZXAgdGhlIGNsaWNrZWQgY291bnRyeSBjZW50ZXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRlID0gW3dpZHRoIC8gMiAtIHNjYWxlICogY3gsIGhlaWdodCAvIDIgLSBzY2FsZSAqIGN5XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgdGhlIHpvb20gdHJhbnNmb3JtYXRpb24gdG8gdGhlIG1hcEdyb3VwIChnIGVsZW1lbnQpIHdpdGggdHJhbnNpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwR3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDc1MClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RyYW5zbGF0ZVswXX0sICR7dHJhbnNsYXRlWzFdfSkgc2NhbGUoJHtzY2FsZX0pYCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoYW5nZSBjb2xvciBvbiBjbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwQ291bnRyeSA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcENvdW50cnkuYXR0cignZmlsbCcsICdncmVlbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlc0Zvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGF0ZXMtZm9ybScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ291bnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5uZXJIVE1MID0gYDxwPlNlbGVjdCB0aGUgZGF0ZXMgZm9yIHlvdXIgdHJpcCB0byAke3NlbGVjdGVkQ291bnRyeX0uPC9wPmA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXNGb3JtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmlubmVySFRNTCA9IGA8cD5TZWxlY3QgdGhlIGNvdW50cnkgZm9yIHlvdXIgbmV4dCB0cmlwLjwvcD5gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVzRm9ybS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBKU09OOicsIGVycm9yKTtcbiAgICAgICAgfSk7XG5cbiAgIFxuXG4gICAgICAgIC8vIEZ1bmN0aW9uIHRvIGxvYWQgSlNPTiBkYXRhIGZvciB0aGUgc2VsZWN0ZWQgY291bnRyeSdzIHRlYW1zXG4gICAgYXN5bmMgZnVuY3Rpb24gbG9hZENvdW50cnlUZWFtQ2FsZW5kYXJzKHNlbGVjdGVkQ291bnRyeSkge1xuICAgICAgICBjb25zdCB0ZWFtRmlsZXMgPSB7XG4gICAgICAgICAgICAnU3BhaW4nOiBbJ2F0bGV0aWNvLmpzb24nLCAnYmFyY2Vsb25hLmpzb24nLCAnbWFkcmlkLmpzb24nXSxcbiAgICAgICAgICAgICdFbmdsYW5kJzogWydhcnNlbmFsLmpzb24nLCAnY2hlbHNlYS5qc29uJywgJ2xpdmVycG9vbC5qc29uJywgJ21hbmNpdHkuanNvbicsICdtYW51dGQuanNvbiddLFxuICAgICAgICAgICAgJ0ZyYW5jZSc6IFsncGFyaXMuanNvbicsICdvbHltcGlxdWUuanNvbiddLFxuICAgICAgICAgICAgJ0l0YWx5JzogWydpbnRlci5qc29uJywgJ2p1dmVudHVzLmpzb24nLCAnbWlsYW4uanNvbiddLFxuICAgICAgICAgICAgJ0dlcm1hbnknOiBbJ2JheWVybi5qc29uJywgJ2JvcnVzc2lhLmpzb24nXVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHRlYW1DYWxlbmRhcnMgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZENvdW50cnkgaW4gdGVhbUZpbGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY291bnRyeVRlYW1zID0gdGVhbUZpbGVzW3NlbGVjdGVkQ291bnRyeV07XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZWFtRmlsZSBvZiBjb3VudHJ5VGVhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgLi4vYXNzZXRzL2NhbGVuZGFycy8ke3NlbGVjdGVkQ291bnRyeX0vJHt0ZWFtRmlsZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVhbUNhbGVuZGFyID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgICAgICB0ZWFtQ2FsZW5kYXJzLnB1c2godGVhbUNhbGVuZGFyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIHRlYW0gY2FsZW5kYXJzIGZvdW5kIGZvciB0aGUgc2VsZWN0ZWQgY291bnRyeS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0ZWFtQ2FsZW5kYXJzO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdGVhbSBjYWxlbmRhcnM6JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZ2V0IHRoZSB1c2VyIHRyaXAgZGF0ZXNcbiAgICAvLyBTdWJtaXQgZXZlbnQgbGlzdGVuZXIgZm9yIHRoZSBkYXRlcyBmb3JtXG4gICAgY29uc3QgdHJpcEZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHJpcC1mb3JtJyk7XG4gICAgY29uc3QgZGF0ZXNGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhdGVzLWZvcm0nKTtcbiAgICB0cmlwRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0LWRhdGUnKS52YWx1ZTtcbiAgICAgICAgY29uc3QgZW5kRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmQtZGF0ZScpLnZhbHVlO1xuICAgICAgICBpZiAoc2VsZWN0ZWRDb3VudHJ5ICYmIHN0YXJ0RGF0ZSAmJiBlbmREYXRlKSB7XG4gICAgICAgICAgICAvLyBEaXNwbGF5IHRoZSB0cmlwIGluZm9cbiAgICAgICAgICAgIGRhdGVzRm9ybS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyBIaWRlIHRoZSBkYXRlcyBmb3JtXG4gICAgICAgICAgICBjb25zdCB0cmlwTWVzc2FnZSA9IGBJbiAke3NlbGVjdGVkQ291bnRyeX0gZnJvbSAke3N0YXJ0RGF0ZX0gdG8gJHtlbmREYXRlfSwgdGhlcmUgd2lsbCBiZSB0aGUgbmV4dCBnYW1lczpgO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2UnKS5pbm5lclRleHQgPSB0cmlwTWVzc2FnZTtcblxuICAgICAgICAgICAgLy8gTG9hZCBKU09OIGRhdGEgZm9yIHRoZSBzZWxlY3RlZCBjb3VudHJ5J3MgdGVhbXNcbiAgICAgICAgICAgIGNvbnN0IHRlYW1DYWxlbmRhcnMgPSBhd2FpdCBsb2FkQ291bnRyeVRlYW1DYWxlbmRhcnMoc2VsZWN0ZWRDb3VudHJ5KTtcbiAgICAgICAgICAgIGlmICh0ZWFtQ2FsZW5kYXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgZ2FtZXMgYmFzZWQgb24gdGhlIHVzZXIncyBzZWxlY3RlZCBkYXRlc1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkR2FtZXMgPSB0ZWFtQ2FsZW5kYXJzLmZsYXRNYXAoKHRlYW1DYWxlbmRhcikgPT5cbiAgICAgICAgICAgICAgICAgICAgdGVhbUNhbGVuZGFyLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIChnYW1lKSA9PiBnYW1lLkRhdGVVdGMgPj0gc3RhcnREYXRlICYmIGdhbWUuRGF0ZVV0YyA8PSBlbmREYXRlXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgLy8gRGlzcGxheSB0aGUgc2VsZWN0ZWQgZ2FtZXMgXG4gICAgICAgICAgICAgICAgZGlzcGxheUdhbWVzKHNlbGVjdGVkR2FtZXMpXG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3RlZEdhbWVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gdGVhbSBjYWxlbmRhcnMgZm91bmQgZm9yIHRoZSBzZWxlY3RlZCBjb3VudHJ5LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICBcbiAgIFxufSk7XG5cbmZ1bmN0aW9uIGRpc3BsYXlHYW1lcyhnYW1lcykge1xuICAgIGNvbnN0IGdhbWVzTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lcy1saXN0Jyk7XG4gICAgZ2FtZXNMaXN0LmlubmVySFRNTCA9ICcnOyAvLyBDbGVhciB0aGUgZXhpc3RpbmcgbGlzdFxuXG4gICAgaWYgKGdhbWVzLmxlbmd0aCA+IDApe1xuXG4gICAgXG4gICAgICAgIGdhbWVzLmZvckVhY2goKGdhbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgRGF0ZVV0YywgSG9tZVRlYW0sIEF3YXlUZWFtLCBMb2NhdGlvbiB9ID0gZ2FtZTtcbiAgICAgICAgICAgIGNvbnN0IGdhbWVEYXRlID0gbmV3IERhdGUoRGF0ZVV0Yyk7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0geyB3ZWVrZGF5OiAnc2hvcnQnLCBtb250aDogJ3Nob3J0JywgZGF5OiAnbnVtZXJpYycsIGhvdXI6ICdudW1lcmljJywgbWludXRlOiAnbnVtZXJpYycgfTtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSBnYW1lRGF0ZS50b0xvY2FsZVN0cmluZygnZW4tVVMnLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgIGxpc3RJdGVtLnRleHRDb250ZW50ID0gYCR7Zm9ybWF0dGVkRGF0ZX0gJHtIb21lVGVhbX0gdnMgJHtBd2F5VGVhbX0sIHN0YWRpdW06ICR7TG9jYXRpb259YDtcbiAgICAgICAgICAgIGdhbWVzTGlzdC5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5vR2FtZXNNZXNzYWdlID0gYEluICR7c2VsZWN0ZWRDb3VudHJ5fSBmcm9tICR7c3RhcnREYXRlfSB0byAke2VuZERhdGV9LCB0aGVyZSB3aWxsIG5vdCBiZSBhbnkgZ2FtZXMsIHBsZWFzZSBjaG9vc2UgZGlmZmVyZW50IGRhdGVzLmA7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJykuaW5uZXJUZXh0ID0gbm9HYW1lc01lc3NhZ2U7XG4gICAgfVxufVxuXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgICAvLyBNYXAgb2YgdGVhbSBuYW1lcyB0byB0aGVpciByZXNwZWN0aXZlIHRlYW0gSURzXG4gICAgY29uc3QgdGVhbUlkcyA9IHtcbiAgICAgICAgYXJzZW5hbDogNDIsXG4gICAgICAgIGNoZWxzZWE6IDQ5LFxuICAgICAgICBsaXZlcnBvb2w6IDQwLFxuICAgICAgICBtYW51bnRkOiAzMyxcbiAgICAgICAgbWFuY2l0eTogNTAsXG4gICAgICAgIG9seW1waXF1ZTogODEsXG4gICAgICAgIHBhcmlzOiA4NSxcbiAgICAgICAgYmF5ZXJuOiAxNTcsXG4gICAgICAgIGJvcnVzc2lhOiAxNjUsXG4gICAgICAgIGp1dmVudHVzOiA0OTYsXG4gICAgICAgIG1pbGFuOiA0ODksXG4gICAgICAgIGludGVyOiA1MDUsXG4gICAgICAgIGJhcmNlbG9uYTogNTI5LFxuICAgICAgICBhdGxldGljbzogNTMwLFxuICAgICAgICBtYWRyaWQ6IDU0MVxuICAgIH07XG5cbiAgICAvLyBBZGQgY2xpY2sgZXZlbnQgbGlzdGVuZXJzIHRvIHRlYW0gaWNvbnNcbiAgICBjb25zdCB0ZWFtSWNvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRlYW0taWNvbnMgaW1nXCIpO1xuICAgIHRlYW1JY29ucy5mb3JFYWNoKChpY29uKSA9PiB7XG4gICAgICAgIGljb24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgdGVhbSBuYW1lIGZyb20gdGhlIGFsdCBhdHRyaWJ1dGUgb2YgdGhlIGNsaWNrZWQgaWNvblxuICAgICAgICAgICAgY29uc3QgdGVhbU5hbWUgPSBpY29uLmFsdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBjb3JyZXNwb25kaW5nIHRlYW0gSUQgZnJvbSB0aGUgdGVhbUlkcyBvYmplY3RcbiAgICAgICAgICAgIGNvbnN0IHRlYW1JZCA9IHRlYW1JZHNbdGVhbU5hbWVdO1xuICAgICAgICAgICAgLy8gUmVkaXJlY3QgdG8gdGVhbS5odG1sIHdpdGggdGhlIHRlYW1JZCBhcyBhIHF1ZXJ5IHBhcmFtZXRlclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgdGVhbS5odG1sP2lkPSR7dGVhbUlkfWA7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG5cblxuY29uc3QgbGVhZ3VlSWRzID0ge1xuICAgIGVuZ2xhbmQ6IDM5LFxuICAgIGdlcm1hbnk6IDc4LFxuICAgIHNwYWluOiAxNDAsXG4gICAgaXRhbHk6IDEzNSxcbiAgICBmcmFuY2U6IDYxXG59Il0sIm1hcHBpbmdzIjoiQUFDQSxJQUFJQSxlQUFlLEdBQUcsS0FBSztBQUMzQixJQUFJQyxHQUFHO0FBQ1AsSUFBSUMsa0JBQWtCO0FBSXRCQyxRQUFRLENBQUNDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLE1BQU07RUFFaEQsTUFBTUMsb0JBQW9CLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLENBQUM7RUFDdEYsSUFBSUMsZUFBZSxHQUFHLElBQUk7O0VBRzFCO0VBQ0FDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUNsQ0MsSUFBSSxDQUFFQyxRQUFRLElBQUtBLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNuQ0YsSUFBSSxDQUFFRyxVQUFVLElBQUs7SUFDbEIsTUFBTUMsWUFBWSxHQUFHVCxRQUFRLENBQUNVLGNBQWMsQ0FBQyxlQUFlLENBQUM7SUFDN0Q7SUFDQSxNQUFNQyxPQUFPLEdBQUdYLFFBQVEsQ0FBQ1ksYUFBYSxDQUFDLEtBQUssQ0FBQztJQUM3Q0QsT0FBTyxDQUFDRSxTQUFTLEdBQUcsU0FBUztJQUM3QkosWUFBWSxDQUFDSyxXQUFXLENBQUNILE9B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\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldXJvcGVhbl9mb290YmFsbC8uL3NyYy9pbmRleC5zY3NzPzhlYjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;