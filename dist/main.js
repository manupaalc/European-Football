/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("let countrySelected = false;\nlet svg;\nlet selectDifferentBtn;\ndocument.addEventListener('DOMContentLoaded', () => {\n  const highlightedCountries = ['Spain', 'Italy', 'France', 'Germany', 'United Kingdom'];\n  let selectedCountry = null;\n\n  // Fetch the GeoJSON data using the Fetch API\n  fetch('../assets/europe_features.json').then(response => response.json()).then(europeJSON => {\n    const mapContainer = document.getElementById('map-container');\n\n    // Create an SVG element for the map\n    svg = d3.select(mapContainer).append('svg');\n\n    // Set the SVG dimensions\n    const width = 800;\n    const height = 600;\n    svg.attr('width', width).attr('height', height);\n\n    // Create a new group element (g) for the map paths\n    const mapGroup = svg.append('g');\n\n    // Draw the map using D3.js and the 'europeJSON' data\n    const projection = d3.geoMercator().fitSize([width, height], europeJSON);\n    const path = d3.geoPath().projection(projection);\n    const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', zoomed);\n    svg.call(zoom);\n    function zoomed(event) {\n      // Apply the zoom transformation to the mapGroup (g element)\n      mapGroup.attr('transform', event.transform);\n      mapGroup.attr('stroke-width', 1 / event.transform.k); // To maintain stroke width while zooming\n    }\n\n    mapGroup.selectAll('path').data(europeJSON.features).enter().append('path').attr('d', path).attr('stroke', 'black').attr('fill', feature => {\n      // Check if the current country is in the highlightedCountries array\n      if (highlightedCountries.includes(feature.properties.name)) {\n        return 'lightgreen'; // Apply lightblue color for the highlighted countries\n      } else {\n        return 'gray'; // Apply gray color for other countries\n      }\n    }).style('cursor', feature => {\n      // Set the cursor to \"pointer\" for the highlighted countries\n      return highlightedCountries.includes(feature.properties.name) ? 'pointer' : 'default';\n    })\n    // .on('mouseover', function (event, feature) {\n    //     // Change the fill color on hover\n    //     if (highlightedCountries.includes(feature.properties.name)) {\n    //         d3.select(this).attr('fill', 'lightblue'); // Apply lightblue color on hover for highlighted countries\n    //     }\n    // })\n    // .on('mouseout', function () {\n    //     // Restore the default fill color when not hovered\n    //     d3.select(this).attr('fill', (feature) => {\n    //         if (highlightedCountries.includes(feature.properties.name)) {\n    //             return 'lightgreen'; // Apply lightblue color for highlighted countries\n    //         } else {\n    //             return 'gray'; // Apply gray color for other countries\n    //         }\n    //     });\n    // })\n    .on('click', function (event, feature) {\n      // Check if the clicked country is in the highlightedCountries array\n      if (highlightedCountries.includes(feature.properties.name)) {\n        // Zoom in on click for the highlighted countries\n        const [[x0, y0], [x1, y1]] = path.bounds(feature); // Get the bounding box of the clicked country\n        const [cx, cy] = [(x0 + x1) / 2, (y0 + y1) / 2]; // Calculate the centroid of the bounding box\n        const scale = 3; // Set the desired scale factor for zooming in\n        countrySelected = true;\n        if (feature.properties.name === 'United Kingdom') {\n          selectedCountry = 'England';\n        } else {\n          selectedCountry = feature.properties.name;\n        }\n\n        // Calculate the translation to keep the clicked country centered\n        const translate = [width / 2 - scale * cx, height / 2 - scale * cy];\n\n        // Apply the zoom transformation to the mapGroup (g element) with transition\n        mapGroup.transition().duration(750).attr('transform', `translate(${translate[0]}, ${translate[1]}) scale(${scale})`);\n\n        // Change color on click\n        mapCountry = d3.select(this);\n        mapCountry.attr('fill', 'green');\n        const message = document.getElementById('message');\n        const datesForm = document.getElementById('dates-form');\n        if (selectedCountry) {\n          message.innerHTML = `<p>Select the dates for your trip to ${selectedCountry}.</p>`;\n          datesForm.style.display = 'block';\n          event.stopPropagation();\n        } else {\n          message.innerHTML = `<p>Select the country for your next trip.</p>`;\n          datesForm.style.display = 'none';\n        }\n      }\n      // Add the select another country button to the page\n      selectDifferentBtn = document.createElement('button'); // Initialize the button here\n      selectDifferentBtn.textContent = 'Select a different country';\n      selectDifferentBtn.addEventListener('click', () => {\n        // Reset the map to its initial position\n        svg.transition().duration(750).call(zoom.transform, d3.zoomIdentity);\n\n        // Reset selectedCountry and countrySelected to null\n\n        mapCountry.attr('fill', 'lightgreen');\n        mapCountry = null;\n        selectedCountry = null;\n        countrySelected = false;\n\n        // Reset the message and dates form\n        const message = document.getElementById('message');\n        const datesForm = document.getElementById('dates-form');\n        message.innerHTML = '<p>Select the country for your next trip.</p>';\n        datesForm.style.display = 'none';\n        // Remove the 'Select a different country' button\n        selectDifferentBtn.remove();\n      });\n      //console.log(countrySelected)\n      if (countrySelected) document.getElementById('map-container').appendChild(selectDifferentBtn);\n    });\n    //console.log(selectedCountry)\n  }).catch(error => {\n    console.error('Error fetching JSON:', error);\n  });\n\n  // Function to load JSON data for the selected country's teams\n  async function loadCountryTeamCalendars(selectedCountry) {\n    const teamFiles = {\n      'Spain': ['atletico.json', 'barcelona.json', 'madrid.json'],\n      'England': ['arsenal.json', 'chelsea.json', 'liverpool.json', 'mancity.json', 'manutd.json'],\n      'France': ['paris.json', 'oliympique.json'],\n      'Italy': ['inter.json', 'juventus.json', 'milan.json'],\n      'Germany': ['bayern.json', 'borussia.json']\n    };\n    const teamCalendars = [];\n    try {\n      if (selectedCountry in teamFiles) {\n        const countryTeams = teamFiles[selectedCountry];\n        for (const teamFile of countryTeams) {\n          const response = await fetch(`../assets/calendars/${selectedCountry}/${teamFile}`);\n          const teamCalendar = await response.json();\n          teamCalendars.push(teamCalendar);\n        }\n      } else {\n        console.error('No team calendars found for the selected country.');\n      }\n      return teamCalendars;\n    } catch (error) {\n      console.error('Error fetching team calendars:', error);\n      return [];\n    }\n  }\n\n  // get the user trip dates\n  // Submit event listener for the dates form\n  const tripForm = document.getElementById('trip-form');\n  const datesForm = document.getElementById('dates-form');\n  tripForm.addEventListener('submit', async event => {\n    event.preventDefault();\n    const startDate = document.getElementById('start-date').value;\n    const endDate = document.getElementById('end-date').value;\n    if (selectedCountry && startDate && endDate) {\n      // Display the trip info\n      datesForm.style.display = 'none'; // Hide the dates form\n      const tripMessage = `In ${selectedCountry} from ${startDate} to ${endDate}, there will be the next games:`;\n      document.getElementById('message').innerText = tripMessage;\n\n      // Load JSON data for the selected country's teams\n      const teamCalendars = await loadCountryTeamCalendars(selectedCountry);\n      if (teamCalendars.length > 0) {\n        // Filter games based on the user's selected dates\n        const selectedGames = teamCalendars.flatMap(teamCalendar => teamCalendar.filter(game => game.DateUtc >= startDate && game.DateUtc <= endDate));\n\n        // Display the selected games \n        displayGames(selectedGames);\n        console.log(selectedGames);\n      } else {\n        console.error('No team calendars found for the selected country.');\n      }\n    }\n  });\n});\nfunction displayGames(games) {\n  const gamesList = document.getElementById('games-list');\n  gamesList.innerHTML = ''; // Clear the existing list\n\n  if (games.length > 0) {\n    games.forEach(game => {\n      const {\n        DateUtc,\n        HomeTeam,\n        AwayTeam,\n        Location\n      } = game;\n      const gameDate = new Date(DateUtc);\n      const options = {\n        weekday: 'short',\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric'\n      };\n      const formattedDate = gameDate.toLocaleString('en-US', options);\n      const listItem = document.createElement('li');\n      listItem.textContent = `${formattedDate} ${HomeTeam} vs ${AwayTeam}, stadium: ${Location}`;\n      gamesList.appendChild(listItem);\n    });\n  } else {\n    const noGamesMessage = `In ${selectedCountry} from ${startDate} to ${endDate}, there will not be any games, please choose different dates.`;\n    document.getElementById('message').innerText = noGamesMessage;\n  }\n}\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Map of team names to their respective team IDs\n  const teamIds = {\n    arsenal: 42,\n    chelsea: 49,\n    liverpool: 40,\n    manuntd: 33,\n    mancity: 50,\n    olympique: 81,\n    paris: 85,\n    bayern: 157,\n    borussia: 165,\n    juventus: 496,\n    milan: 489,\n    inter: 505,\n    barcelona: 529,\n    atletico: 530,\n    madrid: 541\n  };\n\n  // Add click event listeners to team icons\n  const teamIcons = document.querySelectorAll(\".team-icons img\");\n  teamIcons.forEach(icon => {\n    icon.addEventListener(\"click\", () => {\n      // Get the team name from the alt attribute of the clicked icon\n      const teamName = icon.alt.toLowerCase();\n      // Get the corresponding team ID from the teamIds object\n      const teamId = teamIds[teamName];\n      // Redirect to team.html with the teamId as a query parameter\n      window.location.href = `team.html?id=${teamId}`;\n    });\n  });\n});\nconst leagueIds = {\n  england: 39,\n  germany: 78,\n  spain: 140,\n  italy: 135,\n  france: 61\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJuYW1lcyI6WyJjb3VudHJ5U2VsZWN0ZWQiLCJzdmciLCJzZWxlY3REaWZmZXJlbnRCdG4iLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJoaWdobGlnaHRlZENvdW50cmllcyIsInNlbGVjdGVkQ291bnRyeSIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsImV1cm9wZUpTT04iLCJtYXBDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsImQzIiwic2VsZWN0IiwiYXBwZW5kIiwid2lkdGgiLCJoZWlnaHQiLCJhdHRyIiwibWFwR3JvdXAiLCJwcm9qZWN0aW9uIiwiZ2VvTWVyY2F0b3IiLCJmaXRTaXplIiwicGF0aCIsImdlb1BhdGgiLCJ6b29tIiwic2NhbGVFeHRlbnQiLCJvbiIsInpvb21lZCIsImNhbGwiLCJldmVudCIsInRyYW5zZm9ybSIsImsiLCJzZWxlY3RBbGwiLCJkYXRhIiwiZmVhdHVyZXMiLCJlbnRlciIsImZlYXR1cmUiLCJpbmNsdWRlcyIsInByb3BlcnRpZXMiLCJuYW1lIiwic3R5bGUiLCJ4MCIsInkwIiwieDEiLCJ5MSIsImJvdW5kcyIsImN4IiwiY3kiLCJzY2FsZSIsInRyYW5zbGF0ZSIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsIm1hcENvdW50cnkiLCJtZXNzYWdlIiwiZGF0ZXNGb3JtIiwiaW5uZXJIVE1MIiwiZGlzcGxheSIsInN0b3BQcm9wYWdhdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsInpvb21JZGVudGl0eSIsInJlbW92ZSIsImFwcGVuZENoaWxkIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJsb2FkQ291bnRyeVRlYW1DYWxlbmRhcnMiLCJ0ZWFtRmlsZXMiLCJ0ZWFtQ2FsZW5kYXJzIiwiY291bnRyeVRlYW1zIiwidGVhbUZpbGUiLCJ0ZWFtQ2FsZW5kYXIiLCJwdXNoIiwidHJpcEZvcm0iLCJwcmV2ZW50RGVmYXVsdCIsInN0YXJ0RGF0ZSIsInZhbHVlIiwiZW5kRGF0ZSIsInRyaXBNZXNzYWdlIiwiaW5uZXJUZXh0IiwibGVuZ3RoIiwic2VsZWN0ZWRHYW1lcyIsImZsYXRNYXAiLCJmaWx0ZXIiLCJnYW1lIiwiRGF0ZVV0YyIsImRpc3BsYXlHYW1lcyIsImxvZyIsImdhbWVzIiwiZ2FtZXNMaXN0IiwiZm9yRWFjaCIsIkhvbWVUZWFtIiwiQXdheVRlYW0iLCJMb2NhdGlvbiIsImdhbWVEYXRlIiwiRGF0ZSIsIm9wdGlvbnMiLCJ3ZWVrZGF5IiwibW9udGgiLCJkYXkiLCJob3VyIiwibWludXRlIiwiZm9ybWF0dGVkRGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwibGlzdEl0ZW0iLCJub0dhbWVzTWVzc2FnZSIsInRlYW1JZHMiLCJhcnNlbmFsIiwiY2hlbHNlYSIsImxpdmVycG9vbCIsIm1hbnVudGQiLCJtYW5jaXR5Iiwib2x5bXBpcXVlIiwicGFyaXMiLCJiYXllcm4iLCJib3J1c3NpYSIsImp1dmVudHVzIiwibWlsYW4iLCJpbnRlciIsImJhcmNlbG9uYSIsImF0bGV0aWNvIiwibWFkcmlkIiwidGVhbUljb25zIiwicXVlcnlTZWxlY3RvckFsbCIsImljb24iLCJ0ZWFtTmFtZSIsImFsdCIsInRvTG93ZXJDYXNlIiwidGVhbUlkIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwibGVhZ3VlSWRzIiwiZW5nbGFuZCIsImdlcm1hbnkiLCJzcGFpbiIsIml0YWx5IiwiZnJhbmNlIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldXJvcGVhbl9mb290YmFsbC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIlxubGV0IGNvdW50cnlTZWxlY3RlZCA9IGZhbHNlO1xubGV0IHN2ZztcbmxldCBzZWxlY3REaWZmZXJlbnRCdG47XG5cblxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICBcbiAgICBjb25zdCBoaWdobGlnaHRlZENvdW50cmllcyA9IFsnU3BhaW4nLCAnSXRhbHknLCAnRnJhbmNlJywgJ0dlcm1hbnknLCAnVW5pdGVkIEtpbmdkb20nXTtcbiAgICBsZXQgc2VsZWN0ZWRDb3VudHJ5ID0gbnVsbDtcbiAgICBcblxuICAgIC8vIEZldGNoIHRoZSBHZW9KU09OIGRhdGEgdXNpbmcgdGhlIEZldGNoIEFQSVxuICAgIGZldGNoKCcuLi9hc3NldHMvZXVyb3BlX2ZlYXR1cmVzLmpzb24nKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgLnRoZW4oKGV1cm9wZUpTT04pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1hcENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAtY29udGFpbmVyJyk7XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhbiBTVkcgZWxlbWVudCBmb3IgdGhlIG1hcFxuICAgICAgICAgICAgc3ZnID0gZDMuc2VsZWN0KG1hcENvbnRhaW5lcikuYXBwZW5kKCdzdmcnKTtcblxuXG4gICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2V0IHRoZSBTVkcgZGltZW5zaW9uc1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSA4MDA7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSA2MDA7XG4gICAgICAgICAgICBzdmcuYXR0cignd2lkdGgnLCB3aWR0aCkuYXR0cignaGVpZ2h0JywgaGVpZ2h0KTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGdyb3VwIGVsZW1lbnQgKGcpIGZvciB0aGUgbWFwIHBhdGhzXG4gICAgICAgICAgICBjb25zdCBtYXBHcm91cCA9IHN2Zy5hcHBlbmQoJ2cnKTtcblxuICAgICAgICAgICAgLy8gRHJhdyB0aGUgbWFwIHVzaW5nIEQzLmpzIGFuZCB0aGUgJ2V1cm9wZUpTT04nIGRhdGFcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3Rpb24gPSBkMy5nZW9NZXJjYXRvcigpLmZpdFNpemUoW3dpZHRoLCBoZWlnaHRdLCBldXJvcGVKU09OKTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBkMy5nZW9QYXRoKCkucHJvamVjdGlvbihwcm9qZWN0aW9uKTtcblxuICAgICAgICAgICAgY29uc3Qgem9vbSA9IGQzLnpvb20oKS5zY2FsZUV4dGVudChbMSwgOF0pLm9uKCd6b29tJywgem9vbWVkKTtcblxuICAgICAgICAgICAgc3ZnLmNhbGwoem9vbSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHpvb21lZChldmVudCkge1xuICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSB6b29tIHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBtYXBHcm91cCAoZyBlbGVtZW50KVxuICAgICAgICAgICAgICAgIG1hcEdyb3VwLmF0dHIoJ3RyYW5zZm9ybScsIGV2ZW50LnRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgbWFwR3JvdXAuYXR0cignc3Ryb2tlLXdpZHRoJywgMSAvIGV2ZW50LnRyYW5zZm9ybS5rKTsgLy8gVG8gbWFpbnRhaW4gc3Ryb2tlIHdpZHRoIHdoaWxlIHpvb21pbmdcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICBcblxuICAgICAgICAgICAgbWFwR3JvdXBcbiAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgICAgICAgICAgICAuZGF0YShldXJvcGVKU09OLmZlYXR1cmVzKVxuICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBwYXRoKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnYmxhY2snKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgKGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgY291bnRyeSBpcyBpbiB0aGUgaGlnaGxpZ2h0ZWRDb3VudHJpZXMgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodGVkQ291bnRyaWVzLmluY2x1ZGVzKGZlYXR1cmUucHJvcGVydGllcy5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdsaWdodGdyZWVuJzsgLy8gQXBwbHkgbGlnaHRibHVlIGNvbG9yIGZvciB0aGUgaGlnaGxpZ2h0ZWQgY291bnRyaWVzXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2dyYXknOyAvLyBBcHBseSBncmF5IGNvbG9yIGZvciBvdGhlciBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAoZmVhdHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGN1cnNvciB0byBcInBvaW50ZXJcIiBmb3IgdGhlIGhpZ2hsaWdodGVkIGNvdW50cmllc1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGlnaGxpZ2h0ZWRDb3VudHJpZXMuaW5jbHVkZXMoZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWUpID8gJ3BvaW50ZXInIDogJ2RlZmF1bHQnO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoZXZlbnQsIGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgLy8gQ2hhbmdlIHRoZSBmaWxsIGNvbG9yIG9uIGhvdmVyXG4gICAgICAgICAgICAgICAgLy8gICAgIGlmIChoaWdobGlnaHRlZENvdW50cmllcy5pbmNsdWRlcyhmZWF0dXJlLnByb3BlcnRpZXMubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCdmaWxsJywgJ2xpZ2h0Ymx1ZScpOyAvLyBBcHBseSBsaWdodGJsdWUgY29sb3Igb24gaG92ZXIgZm9yIGhpZ2hsaWdodGVkIGNvdW50cmllc1xuICAgICAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAgICAgLy8gfSlcbiAgICAgICAgICAgICAgICAvLyAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vICAgICAvLyBSZXN0b3JlIHRoZSBkZWZhdWx0IGZpbGwgY29sb3Igd2hlbiBub3QgaG92ZXJlZFxuICAgICAgICAgICAgICAgIC8vICAgICBkMy5zZWxlY3QodGhpcykuYXR0cignZmlsbCcsIChmZWF0dXJlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBpZiAoaGlnaGxpZ2h0ZWRDb3VudHJpZXMuaW5jbHVkZXMoZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuICdsaWdodGdyZWVuJzsgLy8gQXBwbHkgbGlnaHRibHVlIGNvbG9yIGZvciBoaWdobGlnaHRlZCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuICdncmF5JzsgLy8gQXBwbHkgZ3JheSBjb2xvciBmb3Igb3RoZXIgY291bnRyaWVzXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIH0pXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCwgZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY2xpY2tlZCBjb3VudHJ5IGlzIGluIHRoZSBoaWdobGlnaHRlZENvdW50cmllcyBhcnJheVxuICAgICAgICAgICAgICAgICAgICBpZiAoaGlnaGxpZ2h0ZWRDb3VudHJpZXMuaW5jbHVkZXMoZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBab29tIGluIG9uIGNsaWNrIGZvciB0aGUgaGlnaGxpZ2h0ZWQgY291bnRyaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbW3gwLCB5MF0sIFt4MSwgeTFdXSA9IHBhdGguYm91bmRzKGZlYXR1cmUpOyAvLyBHZXQgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgY2xpY2tlZCBjb3VudHJ5XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbY3gsIGN5XSA9IFsoeDAgKyB4MSkgLyAyLCAoeTAgKyB5MSkgLyAyXTsgLy8gQ2FsY3VsYXRlIHRoZSBjZW50cm9pZCBvZiB0aGUgYm91bmRpbmcgYm94XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZSA9IDM7IC8vIFNldCB0aGUgZGVzaXJlZCBzY2FsZSBmYWN0b3IgZm9yIHpvb21pbmcgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnlTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWUgPT09ICdVbml0ZWQgS2luZ2RvbScpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ291bnRyeSA9ICdFbmdsYW5kJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJ5ID0gZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSB0cmFuc2xhdGlvbiB0byBrZWVwIHRoZSBjbGlja2VkIGNvdW50cnkgY2VudGVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IFt3aWR0aCAvIDIgLSBzY2FsZSAqIGN4LCBoZWlnaHQgLyAyIC0gc2NhbGUgKiBjeV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSB6b29tIHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBtYXBHcm91cCAoZyBlbGVtZW50KSB3aXRoIHRyYW5zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcEdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbig3NTApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt0cmFuc2xhdGVbMF19LCAke3RyYW5zbGF0ZVsxXX0pIHNjYWxlKCR7c2NhbGV9KWApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgY29sb3Igb24gY2xpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcENvdW50cnkgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBDb3VudHJ5LmF0dHIoJ2ZpbGwnLCAnZ3JlZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZXNGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhdGVzLWZvcm0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZENvdW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmlubmVySFRNTCA9IGA8cD5TZWxlY3QgdGhlIGRhdGVzIGZvciB5b3VyIHRyaXAgdG8gJHtzZWxlY3RlZENvdW50cnl9LjwvcD5gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVzRm9ybS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pbm5lckhUTUwgPSBgPHA+U2VsZWN0IHRoZSBjb3VudHJ5IGZvciB5b3VyIG5leHQgdHJpcC48L3A+YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlc0Zvcm0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNlbGVjdCBhbm90aGVyIGNvdW50cnkgYnV0dG9uIHRvIHRoZSBwYWdlXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdERpZmZlcmVudEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOyAvLyBJbml0aWFsaXplIHRoZSBidXR0b24gaGVyZVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3REaWZmZXJlbnRCdG4udGV4dENvbnRlbnQgPSAnU2VsZWN0IGEgZGlmZmVyZW50IGNvdW50cnknO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3REaWZmZXJlbnRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgbWFwIHRvIGl0cyBpbml0aWFsIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBzdmcudHJhbnNpdGlvbigpLmR1cmF0aW9uKDc1MCkuY2FsbCh6b29tLnRyYW5zZm9ybSwgZDMuem9vbUlkZW50aXR5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgc2VsZWN0ZWRDb3VudHJ5IGFuZCBjb3VudHJ5U2VsZWN0ZWQgdG8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcENvdW50cnkuYXR0cignZmlsbCcsICdsaWdodGdyZWVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBDb3VudHJ5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ291bnRyeSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJ5U2VsZWN0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBtZXNzYWdlIGFuZCBkYXRlcyBmb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVzRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYXRlcy1mb3JtJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmlubmVySFRNTCA9ICc8cD5TZWxlY3QgdGhlIGNvdW50cnkgZm9yIHlvdXIgbmV4dCB0cmlwLjwvcD4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXNGb3JtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlICdTZWxlY3QgYSBkaWZmZXJlbnQgY291bnRyeScgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3REaWZmZXJlbnRCdG4ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGNvdW50cnlTZWxlY3RlZClcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50cnlTZWxlY3RlZCkgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1jb250YWluZXInKS5hcHBlbmRDaGlsZChzZWxlY3REaWZmZXJlbnRCdG4pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhzZWxlY3RlZENvdW50cnkpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBKU09OOicsIGVycm9yKTtcbiAgICAgICAgfSk7XG5cbiAgIFxuXG4gICAgICAgIC8vIEZ1bmN0aW9uIHRvIGxvYWQgSlNPTiBkYXRhIGZvciB0aGUgc2VsZWN0ZWQgY291bnRyeSdzIHRlYW1zXG4gICAgYXN5bmMgZnVuY3Rpb24gbG9hZENvdW50cnlUZWFtQ2FsZW5kYXJzKHNlbGVjdGVkQ291bnRyeSkge1xuICAgICAgICBjb25zdCB0ZWFtRmlsZXMgPSB7XG4gICAgICAgICAgICAnU3BhaW4nOiBbJ2F0bGV0aWNvLmpzb24nLCAnYmFyY2Vsb25hLmpzb24nLCAnbWFkcmlkLmpzb24nXSxcbiAgICAgICAgICAgICdFbmdsYW5kJzogWydhcnNlbmFsLmpzb24nLCAnY2hlbHNlYS5qc29uJywgJ2xpdmVycG9vbC5qc29uJywgJ21hbmNpdHkuanNvbicsICdtYW51dGQuanNvbiddLFxuICAgICAgICAgICAgJ0ZyYW5jZSc6IFsncGFyaXMuanNvbicsICdvbGl5bXBpcXVlLmpzb24nXSxcbiAgICAgICAgICAgICdJdGFseSc6IFsnaW50ZXIuanNvbicsICdqdXZlbnR1cy5qc29uJywgJ21pbGFuLmpzb24nXSxcbiAgICAgICAgICAgICdHZXJtYW55JzogWydiYXllcm4uanNvbicsICdib3J1c3NpYS5qc29uJ11cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB0ZWFtQ2FsZW5kYXJzID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRDb3VudHJ5IGluIHRlYW1GaWxlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50cnlUZWFtcyA9IHRlYW1GaWxlc1tzZWxlY3RlZENvdW50cnldO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGVhbUZpbGUgb2YgY291bnRyeVRlYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC4uL2Fzc2V0cy9jYWxlbmRhcnMvJHtzZWxlY3RlZENvdW50cnl9LyR7dGVhbUZpbGV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlYW1DYWxlbmRhciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgICAgICAgICAgdGVhbUNhbGVuZGFycy5wdXNoKHRlYW1DYWxlbmRhcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyB0ZWFtIGNhbGVuZGFycyBmb3VuZCBmb3IgdGhlIHNlbGVjdGVkIGNvdW50cnkuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGVhbUNhbGVuZGFycztcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHRlYW0gY2FsZW5kYXJzOicsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGdldCB0aGUgdXNlciB0cmlwIGRhdGVzXG4gICAgLy8gU3VibWl0IGV2ZW50IGxpc3RlbmVyIGZvciB0aGUgZGF0ZXMgZm9ybVxuICAgIGNvbnN0IHRyaXBGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RyaXAtZm9ybScpO1xuICAgIGNvbnN0IGRhdGVzRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYXRlcy1mb3JtJyk7XG4gICAgdHJpcEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFydC1kYXRlJykudmFsdWU7XG4gICAgICAgIGNvbnN0IGVuZERhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW5kLWRhdGUnKS52YWx1ZTtcbiAgICAgICAgaWYgKHNlbGVjdGVkQ291bnRyeSAmJiBzdGFydERhdGUgJiYgZW5kRGF0ZSkge1xuICAgICAgICAgICAgLy8gRGlzcGxheSB0aGUgdHJpcCBpbmZvXG4gICAgICAgICAgICBkYXRlc0Zvcm0uc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy8gSGlkZSB0aGUgZGF0ZXMgZm9ybVxuICAgICAgICAgICAgY29uc3QgdHJpcE1lc3NhZ2UgPSBgSW4gJHtzZWxlY3RlZENvdW50cnl9IGZyb20gJHtzdGFydERhdGV9IHRvICR7ZW5kRGF0ZX0sIHRoZXJlIHdpbGwgYmUgdGhlIG5leHQgZ2FtZXM6YDtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJykuaW5uZXJUZXh0ID0gdHJpcE1lc3NhZ2U7XG5cbiAgICAgICAgICAgIC8vIExvYWQgSlNPTiBkYXRhIGZvciB0aGUgc2VsZWN0ZWQgY291bnRyeSdzIHRlYW1zXG4gICAgICAgICAgICBjb25zdCB0ZWFtQ2FsZW5kYXJzID0gYXdhaXQgbG9hZENvdW50cnlUZWFtQ2FsZW5kYXJzKHNlbGVjdGVkQ291bnRyeSk7XG4gICAgICAgICAgICBpZiAodGVhbUNhbGVuZGFycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlsdGVyIGdhbWVzIGJhc2VkIG9uIHRoZSB1c2VyJ3Mgc2VsZWN0ZWQgZGF0ZXNcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEdhbWVzID0gdGVhbUNhbGVuZGFycy5mbGF0TWFwKCh0ZWFtQ2FsZW5kYXIpID0+XG4gICAgICAgICAgICAgICAgICAgIHRlYW1DYWxlbmRhci5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZ2FtZSkgPT4gZ2FtZS5EYXRlVXRjID49IHN0YXJ0RGF0ZSAmJiBnYW1lLkRhdGVVdGMgPD0gZW5kRGF0ZVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgdGhlIHNlbGVjdGVkIGdhbWVzIFxuICAgICAgICAgICAgICAgIGRpc3BsYXlHYW1lcyhzZWxlY3RlZEdhbWVzKVxuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2VsZWN0ZWRHYW1lcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIHRlYW0gY2FsZW5kYXJzIGZvdW5kIGZvciB0aGUgc2VsZWN0ZWQgY291bnRyeS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgXG4gICBcbn0pO1xuXG5mdW5jdGlvbiBkaXNwbGF5R2FtZXMoZ2FtZXMpIHtcbiAgICBjb25zdCBnYW1lc0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZXMtbGlzdCcpO1xuICAgIGdhbWVzTGlzdC5pbm5lckhUTUwgPSAnJzsgLy8gQ2xlYXIgdGhlIGV4aXN0aW5nIGxpc3RcblxuICAgIGlmIChnYW1lcy5sZW5ndGggPiAwKXtcblxuICAgIFxuICAgICAgICBnYW1lcy5mb3JFYWNoKChnYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IERhdGVVdGMsIEhvbWVUZWFtLCBBd2F5VGVhbSwgTG9jYXRpb24gfSA9IGdhbWU7XG4gICAgICAgICAgICBjb25zdCBnYW1lRGF0ZSA9IG5ldyBEYXRlKERhdGVVdGMpO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgd2Vla2RheTogJ3Nob3J0JywgbW9udGg6ICdzaG9ydCcsIGRheTogJ251bWVyaWMnLCBob3VyOiAnbnVtZXJpYycsIG1pbnV0ZTogJ251bWVyaWMnIH07XG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWREYXRlID0gZ2FtZURhdGUudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICBsaXN0SXRlbS50ZXh0Q29udGVudCA9IGAke2Zvcm1hdHRlZERhdGV9ICR7SG9tZVRlYW19IHZzICR7QXdheVRlYW19LCBzdGFkaXVtOiAke0xvY2F0aW9ufWA7XG4gICAgICAgICAgICBnYW1lc0xpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBub0dhbWVzTWVzc2FnZSA9IGBJbiAke3NlbGVjdGVkQ291bnRyeX0gZnJvbSAke3N0YXJ0RGF0ZX0gdG8gJHtlbmREYXRlfSwgdGhlcmUgd2lsbCBub3QgYmUgYW55IGdhbWVzLCBwbGVhc2UgY2hvb3NlIGRpZmZlcmVudCBkYXRlcy5gO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZScpLmlubmVyVGV4dCA9IG5vR2FtZXNNZXNzYWdlO1xuICAgIH1cbn1cblxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gICAgLy8gTWFwIG9mIHRlYW0gbmFtZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSB0ZWFtIElEc1xuICAgIGNvbnN0IHRlYW1JZHMgPSB7XG4gICAgICAgIGFyc2VuYWw6IDQyLFxuICAgICAgICBjaGVsc2VhOiA0OSxcbiAgICAgICAgbGl2ZXJwb29sOiA0MCxcbiAgICAgICAgbWFudW50ZDogMzMsXG4gICAgICAgIG1hbmNpdHk6IDUwLFxuICAgICAgICBvbHltcGlxdWU6IDgxLFxuICAgICAgICBwYXJpczogODUsXG4gICAgICAgIGJheWVybjogMTU3LFxuICAgICAgICBib3J1c3NpYTogMTY1LFxuICAgICAgICBqdXZlbnR1czogNDk2LFxuICAgICAgICBtaWxhbjogNDg5LFxuICAgICAgICBpbnRlcjogNTA1LFxuICAgICAgICBiYXJjZWxvbmE6IDUyOSxcbiAgICAgICAgYXRsZXRpY286IDUzMCxcbiAgICAgICAgbWFkcmlkOiA1NDFcbiAgICB9O1xuXG4gICAgLy8gQWRkIGNsaWNrIGV2ZW50IGxpc3RlbmVycyB0byB0ZWFtIGljb25zXG4gICAgY29uc3QgdGVhbUljb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50ZWFtLWljb25zIGltZ1wiKTtcbiAgICB0ZWFtSWNvbnMuZm9yRWFjaCgoaWNvbikgPT4ge1xuICAgICAgICBpY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBHZXQgdGhlIHRlYW0gbmFtZSBmcm9tIHRoZSBhbHQgYXR0cmlidXRlIG9mIHRoZSBjbGlja2VkIGljb25cbiAgICAgICAgICAgIGNvbnN0IHRlYW1OYW1lID0gaWNvbi5hbHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY29ycmVzcG9uZGluZyB0ZWFtIElEIGZyb20gdGhlIHRlYW1JZHMgb2JqZWN0XG4gICAgICAgICAgICBjb25zdCB0ZWFtSWQgPSB0ZWFtSWRzW3RlYW1OYW1lXTtcbiAgICAgICAgICAgIC8vIFJlZGlyZWN0IHRvIHRlYW0uaHRtbCB3aXRoIHRoZSB0ZWFtSWQgYXMgYSBxdWVyeSBwYXJhbWV0ZXJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYHRlYW0uaHRtbD9pZD0ke3RlYW1JZH1gO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuXG5cbmNvbnN0IGxlYWd1ZUlkcyA9IHtcbiAgICBlbmdsYW5kOiAzOSxcbiAgICBnZXJtYW55OiA3OCxcbiAgICBzcGFp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\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldXJvcGVhbl9mb290YmFsbC8uL3NyYy9pbmRleC5zY3NzPzhlYjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;